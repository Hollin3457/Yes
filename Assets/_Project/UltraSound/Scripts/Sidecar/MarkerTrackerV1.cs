// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: marker_tracker_v1.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NUHS.Sidecar {

  /// <summary>Holder for reflection information generated from marker_tracker_v1.proto</summary>
  public static partial class MarkerTrackerV1Reflection {

    #region Descriptor
    /// <summary>File descriptor for marker_tracker_v1.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MarkerTrackerV1Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdtYXJrZXJfdHJhY2tlcl92MS5wcm90byJmChpNYXJrZXJUcmFja2VyU2lu",
            "Z2xlUmVxdWVzdBINCgVpbWFnZRgBIAEoDBIQCghjYW1lcmFJRBgCIAEoCRIU",
            "CgxjYW1lcmFNYXRyaXgYAyABKAkSEQoJdGltZVN0YW1wGAQgASgJImwKGk1h",
            "cmtlclRyYWNrZXJTdGVyZW9SZXF1ZXN0EhEKCWxlZnRJbWFnZRgBIAEoDBIS",
            "CgpyaWdodEltYWdlGAIgASgMEhIKCmxlZnRNYXRyaXgYAyABKAkSEwoLcmln",
            "aHRNYXRyaXgYBCABKAkiKwoPTWFya2VyUG9zaXRpb25zEhgKB21hcmtlcnMY",
            "ASADKAsyBy5NYXJrZXIiLgoGTWFya2VyEhAKCG1hcmtlcklkGAEgASgFEhIK",
            "CnBvc2VNYXRyaXgYAiABKAkytAIKFk1hcmtlclRyYWNrZXJTZXJ2aWNlVjES",
            "QQoQVHJhY2tTaW5nbGVVbmFyeRIbLk1hcmtlclRyYWNrZXJTaW5nbGVSZXF1",
            "ZXN0GhAuTWFya2VyUG9zaXRpb25zEkkKFFRyYWNrU2luZ2xlU3RyZWFtaW5n",
            "EhsuTWFya2VyVHJhY2tlclNpbmdsZVJlcXVlc3QaEC5NYXJrZXJQb3NpdGlv",
            "bnMoATABEkEKEFRyYWNrU3RlcmVvVW5hcnkSGy5NYXJrZXJUcmFja2VyU3Rl",
            "cmVvUmVxdWVzdBoQLk1hcmtlclBvc2l0aW9ucxJJChRUcmFja1N0ZXJlb1N0",
            "cmVhbWluZxIbLk1hcmtlclRyYWNrZXJTdGVyZW9SZXF1ZXN0GhAuTWFya2Vy",
            "UG9zaXRpb25zKAEwAUIPqgIMTlVIUy5TaWRlY2FyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NUHS.Sidecar.MarkerTrackerSingleRequest), global::NUHS.Sidecar.MarkerTrackerSingleRequest.Parser, new[]{ "Image", "CameraID", "CameraMatrix", "TimeStamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NUHS.Sidecar.MarkerTrackerStereoRequest), global::NUHS.Sidecar.MarkerTrackerStereoRequest.Parser, new[]{ "LeftImage", "RightImage", "LeftMatrix", "RightMatrix" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NUHS.Sidecar.MarkerPositions), global::NUHS.Sidecar.MarkerPositions.Parser, new[]{ "Markers" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NUHS.Sidecar.Marker), global::NUHS.Sidecar.Marker.Parser, new[]{ "MarkerId", "PoseMatrix" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class MarkerTrackerSingleRequest : pb::IMessage<MarkerTrackerSingleRequest> {
    private static readonly pb::MessageParser<MarkerTrackerSingleRequest> _parser = new pb::MessageParser<MarkerTrackerSingleRequest>(() => new MarkerTrackerSingleRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarkerTrackerSingleRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NUHS.Sidecar.MarkerTrackerV1Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerTrackerSingleRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerTrackerSingleRequest(MarkerTrackerSingleRequest other) : this() {
      image_ = other.image_;
      cameraID_ = other.cameraID_;
      cameraMatrix_ = other.cameraMatrix_;
      timeStamp_ = other.timeStamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerTrackerSingleRequest Clone() {
      return new MarkerTrackerSingleRequest(this);
    }

    /// <summary>Field number for the "image" field.</summary>
    public const int ImageFieldNumber = 1;
    private pb::ByteString image_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Image {
      get { return image_; }
      set {
        image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cameraID" field.</summary>
    public const int CameraIDFieldNumber = 2;
    private string cameraID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraID {
      get { return cameraID_; }
      set {
        cameraID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cameraMatrix" field.</summary>
    public const int CameraMatrixFieldNumber = 3;
    private string cameraMatrix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CameraMatrix {
      get { return cameraMatrix_; }
      set {
        cameraMatrix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "timeStamp" field.</summary>
    public const int TimeStampFieldNumber = 4;
    private string timeStamp_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TimeStamp {
      get { return timeStamp_; }
      set {
        timeStamp_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarkerTrackerSingleRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarkerTrackerSingleRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Image != other.Image) return false;
      if (CameraID != other.CameraID) return false;
      if (CameraMatrix != other.CameraMatrix) return false;
      if (TimeStamp != other.TimeStamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Image.Length != 0) hash ^= Image.GetHashCode();
      if (CameraID.Length != 0) hash ^= CameraID.GetHashCode();
      if (CameraMatrix.Length != 0) hash ^= CameraMatrix.GetHashCode();
      if (TimeStamp.Length != 0) hash ^= TimeStamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Image.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Image);
      }
      if (CameraID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CameraID);
      }
      if (CameraMatrix.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CameraMatrix);
      }
      if (TimeStamp.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TimeStamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Image.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
      }
      if (CameraID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraID);
      }
      if (CameraMatrix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CameraMatrix);
      }
      if (TimeStamp.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TimeStamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarkerTrackerSingleRequest other) {
      if (other == null) {
        return;
      }
      if (other.Image.Length != 0) {
        Image = other.Image;
      }
      if (other.CameraID.Length != 0) {
        CameraID = other.CameraID;
      }
      if (other.CameraMatrix.Length != 0) {
        CameraMatrix = other.CameraMatrix;
      }
      if (other.TimeStamp.Length != 0) {
        TimeStamp = other.TimeStamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Image = input.ReadBytes();
            break;
          }
          case 18: {
            CameraID = input.ReadString();
            break;
          }
          case 26: {
            CameraMatrix = input.ReadString();
            break;
          }
          case 34: {
            TimeStamp = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MarkerTrackerStereoRequest : pb::IMessage<MarkerTrackerStereoRequest> {
    private static readonly pb::MessageParser<MarkerTrackerStereoRequest> _parser = new pb::MessageParser<MarkerTrackerStereoRequest>(() => new MarkerTrackerStereoRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarkerTrackerStereoRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NUHS.Sidecar.MarkerTrackerV1Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerTrackerStereoRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerTrackerStereoRequest(MarkerTrackerStereoRequest other) : this() {
      leftImage_ = other.leftImage_;
      rightImage_ = other.rightImage_;
      leftMatrix_ = other.leftMatrix_;
      rightMatrix_ = other.rightMatrix_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerTrackerStereoRequest Clone() {
      return new MarkerTrackerStereoRequest(this);
    }

    /// <summary>Field number for the "leftImage" field.</summary>
    public const int LeftImageFieldNumber = 1;
    private pb::ByteString leftImage_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString LeftImage {
      get { return leftImage_; }
      set {
        leftImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rightImage" field.</summary>
    public const int RightImageFieldNumber = 2;
    private pb::ByteString rightImage_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString RightImage {
      get { return rightImage_; }
      set {
        rightImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "leftMatrix" field.</summary>
    public const int LeftMatrixFieldNumber = 3;
    private string leftMatrix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LeftMatrix {
      get { return leftMatrix_; }
      set {
        leftMatrix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "rightMatrix" field.</summary>
    public const int RightMatrixFieldNumber = 4;
    private string rightMatrix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RightMatrix {
      get { return rightMatrix_; }
      set {
        rightMatrix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarkerTrackerStereoRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarkerTrackerStereoRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LeftImage != other.LeftImage) return false;
      if (RightImage != other.RightImage) return false;
      if (LeftMatrix != other.LeftMatrix) return false;
      if (RightMatrix != other.RightMatrix) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LeftImage.Length != 0) hash ^= LeftImage.GetHashCode();
      if (RightImage.Length != 0) hash ^= RightImage.GetHashCode();
      if (LeftMatrix.Length != 0) hash ^= LeftMatrix.GetHashCode();
      if (RightMatrix.Length != 0) hash ^= RightMatrix.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LeftImage.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(LeftImage);
      }
      if (RightImage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(RightImage);
      }
      if (LeftMatrix.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LeftMatrix);
      }
      if (RightMatrix.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(RightMatrix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LeftImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(LeftImage);
      }
      if (RightImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(RightImage);
      }
      if (LeftMatrix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeftMatrix);
      }
      if (RightMatrix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RightMatrix);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarkerTrackerStereoRequest other) {
      if (other == null) {
        return;
      }
      if (other.LeftImage.Length != 0) {
        LeftImage = other.LeftImage;
      }
      if (other.RightImage.Length != 0) {
        RightImage = other.RightImage;
      }
      if (other.LeftMatrix.Length != 0) {
        LeftMatrix = other.LeftMatrix;
      }
      if (other.RightMatrix.Length != 0) {
        RightMatrix = other.RightMatrix;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            LeftImage = input.ReadBytes();
            break;
          }
          case 18: {
            RightImage = input.ReadBytes();
            break;
          }
          case 26: {
            LeftMatrix = input.ReadString();
            break;
          }
          case 34: {
            RightMatrix = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MarkerPositions : pb::IMessage<MarkerPositions> {
    private static readonly pb::MessageParser<MarkerPositions> _parser = new pb::MessageParser<MarkerPositions>(() => new MarkerPositions());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MarkerPositions> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NUHS.Sidecar.MarkerTrackerV1Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerPositions() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerPositions(MarkerPositions other) : this() {
      markers_ = other.markers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MarkerPositions Clone() {
      return new MarkerPositions(this);
    }

    /// <summary>Field number for the "markers" field.</summary>
    public const int MarkersFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NUHS.Sidecar.Marker> _repeated_markers_codec
        = pb::FieldCodec.ForMessage(10, global::NUHS.Sidecar.Marker.Parser);
    private readonly pbc::RepeatedField<global::NUHS.Sidecar.Marker> markers_ = new pbc::RepeatedField<global::NUHS.Sidecar.Marker>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NUHS.Sidecar.Marker> Markers {
      get { return markers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MarkerPositions);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MarkerPositions other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!markers_.Equals(other.markers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= markers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      markers_.WriteTo(output, _repeated_markers_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += markers_.CalculateSize(_repeated_markers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MarkerPositions other) {
      if (other == null) {
        return;
      }
      markers_.Add(other.markers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            markers_.AddEntriesFrom(input, _repeated_markers_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Marker : pb::IMessage<Marker> {
    private static readonly pb::MessageParser<Marker> _parser = new pb::MessageParser<Marker>(() => new Marker());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Marker> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NUHS.Sidecar.MarkerTrackerV1Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Marker() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Marker(Marker other) : this() {
      markerId_ = other.markerId_;
      poseMatrix_ = other.poseMatrix_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Marker Clone() {
      return new Marker(this);
    }

    /// <summary>Field number for the "markerId" field.</summary>
    public const int MarkerIdFieldNumber = 1;
    private int markerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MarkerId {
      get { return markerId_; }
      set {
        markerId_ = value;
      }
    }

    /// <summary>Field number for the "poseMatrix" field.</summary>
    public const int PoseMatrixFieldNumber = 2;
    private string poseMatrix_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PoseMatrix {
      get { return poseMatrix_; }
      set {
        poseMatrix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Marker);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Marker other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MarkerId != other.MarkerId) return false;
      if (PoseMatrix != other.PoseMatrix) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MarkerId != 0) hash ^= MarkerId.GetHashCode();
      if (PoseMatrix.Length != 0) hash ^= PoseMatrix.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MarkerId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MarkerId);
      }
      if (PoseMatrix.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PoseMatrix);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MarkerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MarkerId);
      }
      if (PoseMatrix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PoseMatrix);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Marker other) {
      if (other == null) {
        return;
      }
      if (other.MarkerId != 0) {
        MarkerId = other.MarkerId;
      }
      if (other.PoseMatrix.Length != 0) {
        PoseMatrix = other.PoseMatrix;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MarkerId = input.ReadInt32();
            break;
          }
          case 18: {
            PoseMatrix = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
