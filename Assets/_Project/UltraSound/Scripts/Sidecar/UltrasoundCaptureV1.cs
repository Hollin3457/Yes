// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ultrasound_capture_v1.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NUHS.Sidecar {

  /// <summary>Holder for reflection information generated from ultrasound_capture_v1.proto</summary>
  public static partial class UltrasoundCaptureV1Reflection {

    #region Descriptor
    /// <summary>File descriptor for ultrasound_capture_v1.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UltrasoundCaptureV1Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cht1bHRyYXNvdW5kX2NhcHR1cmVfdjEucHJvdG8izwEKH1VsdHJhc291bmRD",
            "YXB0dXJlU2V0dXBSZXF1ZXN0VjESEAoIZGV2aWNlSWQYASABKA0SEAoIY2Fw",
            "dHVyZVcYAiABKA0SEAoIY2FwdHVyZUgYAyABKA0SDQoFY3JvcFgYBCABKA0S",
            "DQoFY3JvcFkYBSABKA0SDQoFY3JvcFcYBiABKA0SDQoFY3JvcEgYByABKA0S",
            "GQoRZGV0ZWN0UGl4ZWxzUGVyQ20YCCABKAgSHwoXZGV0ZWN0UGl4ZWxzUGVy",
            "Q21NZXRob2QYCSABKA0iOwogVWx0cmFzb3VuZENhcHR1cmVTZXR1cFJlc3Bv",
            "bnNlVjESFwoPcmVzdGFydFJlcXVpcmVkGAEgASgIIksKGlVsdHJhc291bmRD",
            "YXB0dXJlUmVxdWVzdFYxEgsKA2ZwcxgBIAEoDRIPCgdxdWFsaXR5GAIgASgN",
            "Eg8KB3Jlc3RhcnQYAyABKAgiPQoYVWx0cmFzb3VuZENhcHR1cmVGcmFtZVYx",
            "EgwKBGRhdGEYASABKAwSEwoLcGl4ZWxzUGVyQ20YAiABKAIy9QEKGlVsdHJh",
            "c291bmRDYXB0dXJlU2VydmljZVYxEkwKBVNldHVwEiAuVWx0cmFzb3VuZENh",
            "cHR1cmVTZXR1cFJlcXVlc3RWMRohLlVsdHJhc291bmRDYXB0dXJlU2V0dXBS",
            "ZXNwb25zZVYxEkIKBlN0cmVhbRIbLlVsdHJhc291bmRDYXB0dXJlUmVxdWVz",
            "dFYxGhkuVWx0cmFzb3VuZENhcHR1cmVGcmFtZVYxMAESRQoLU2luZ2xlRnJh",
            "bWUSGy5VbHRyYXNvdW5kQ2FwdHVyZVJlcXVlc3RWMRoZLlVsdHJhc291bmRD",
            "YXB0dXJlRnJhbWVWMUIPqgIMTlVIUy5TaWRlY2FyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NUHS.Sidecar.UltrasoundCaptureSetupRequestV1), global::NUHS.Sidecar.UltrasoundCaptureSetupRequestV1.Parser, new[]{ "DeviceId", "CaptureW", "CaptureH", "CropX", "CropY", "CropW", "CropH", "DetectPixelsPerCm", "DetectPixelsPerCmMethod" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NUHS.Sidecar.UltrasoundCaptureSetupResponseV1), global::NUHS.Sidecar.UltrasoundCaptureSetupResponseV1.Parser, new[]{ "RestartRequired" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NUHS.Sidecar.UltrasoundCaptureRequestV1), global::NUHS.Sidecar.UltrasoundCaptureRequestV1.Parser, new[]{ "Fps", "Quality", "Restart" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NUHS.Sidecar.UltrasoundCaptureFrameV1), global::NUHS.Sidecar.UltrasoundCaptureFrameV1.Parser, new[]{ "Data", "PixelsPerCm" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class UltrasoundCaptureSetupRequestV1 : pb::IMessage<UltrasoundCaptureSetupRequestV1> {
    private static readonly pb::MessageParser<UltrasoundCaptureSetupRequestV1> _parser = new pb::MessageParser<UltrasoundCaptureSetupRequestV1>(() => new UltrasoundCaptureSetupRequestV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UltrasoundCaptureSetupRequestV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NUHS.Sidecar.UltrasoundCaptureV1Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UltrasoundCaptureSetupRequestV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UltrasoundCaptureSetupRequestV1(UltrasoundCaptureSetupRequestV1 other) : this() {
      deviceId_ = other.deviceId_;
      captureW_ = other.captureW_;
      captureH_ = other.captureH_;
      cropX_ = other.cropX_;
      cropY_ = other.cropY_;
      cropW_ = other.cropW_;
      cropH_ = other.cropH_;
      detectPixelsPerCm_ = other.detectPixelsPerCm_;
      detectPixelsPerCmMethod_ = other.detectPixelsPerCmMethod_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UltrasoundCaptureSetupRequestV1 Clone() {
      return new UltrasoundCaptureSetupRequestV1(this);
    }

    /// <summary>Field number for the "deviceId" field.</summary>
    public const int DeviceIdFieldNumber = 1;
    private uint deviceId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = value;
      }
    }

    /// <summary>Field number for the "captureW" field.</summary>
    public const int CaptureWFieldNumber = 2;
    private uint captureW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CaptureW {
      get { return captureW_; }
      set {
        captureW_ = value;
      }
    }

    /// <summary>Field number for the "captureH" field.</summary>
    public const int CaptureHFieldNumber = 3;
    private uint captureH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CaptureH {
      get { return captureH_; }
      set {
        captureH_ = value;
      }
    }

    /// <summary>Field number for the "cropX" field.</summary>
    public const int CropXFieldNumber = 4;
    private uint cropX_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CropX {
      get { return cropX_; }
      set {
        cropX_ = value;
      }
    }

    /// <summary>Field number for the "cropY" field.</summary>
    public const int CropYFieldNumber = 5;
    private uint cropY_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CropY {
      get { return cropY_; }
      set {
        cropY_ = value;
      }
    }

    /// <summary>Field number for the "cropW" field.</summary>
    public const int CropWFieldNumber = 6;
    private uint cropW_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CropW {
      get { return cropW_; }
      set {
        cropW_ = value;
      }
    }

    /// <summary>Field number for the "cropH" field.</summary>
    public const int CropHFieldNumber = 7;
    private uint cropH_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CropH {
      get { return cropH_; }
      set {
        cropH_ = value;
      }
    }

    /// <summary>Field number for the "detectPixelsPerCm" field.</summary>
    public const int DetectPixelsPerCmFieldNumber = 8;
    private bool detectPixelsPerCm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DetectPixelsPerCm {
      get { return detectPixelsPerCm_; }
      set {
        detectPixelsPerCm_ = value;
      }
    }

    /// <summary>Field number for the "detectPixelsPerCmMethod" field.</summary>
    public const int DetectPixelsPerCmMethodFieldNumber = 9;
    private uint detectPixelsPerCmMethod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DetectPixelsPerCmMethod {
      get { return detectPixelsPerCmMethod_; }
      set {
        detectPixelsPerCmMethod_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UltrasoundCaptureSetupRequestV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UltrasoundCaptureSetupRequestV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceId != other.DeviceId) return false;
      if (CaptureW != other.CaptureW) return false;
      if (CaptureH != other.CaptureH) return false;
      if (CropX != other.CropX) return false;
      if (CropY != other.CropY) return false;
      if (CropW != other.CropW) return false;
      if (CropH != other.CropH) return false;
      if (DetectPixelsPerCm != other.DetectPixelsPerCm) return false;
      if (DetectPixelsPerCmMethod != other.DetectPixelsPerCmMethod) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceId != 0) hash ^= DeviceId.GetHashCode();
      if (CaptureW != 0) hash ^= CaptureW.GetHashCode();
      if (CaptureH != 0) hash ^= CaptureH.GetHashCode();
      if (CropX != 0) hash ^= CropX.GetHashCode();
      if (CropY != 0) hash ^= CropY.GetHashCode();
      if (CropW != 0) hash ^= CropW.GetHashCode();
      if (CropH != 0) hash ^= CropH.GetHashCode();
      if (DetectPixelsPerCm != false) hash ^= DetectPixelsPerCm.GetHashCode();
      if (DetectPixelsPerCmMethod != 0) hash ^= DetectPixelsPerCmMethod.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceId != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(DeviceId);
      }
      if (CaptureW != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(CaptureW);
      }
      if (CaptureH != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CaptureH);
      }
      if (CropX != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(CropX);
      }
      if (CropY != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CropY);
      }
      if (CropW != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(CropW);
      }
      if (CropH != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(CropH);
      }
      if (DetectPixelsPerCm != false) {
        output.WriteRawTag(64);
        output.WriteBool(DetectPixelsPerCm);
      }
      if (DetectPixelsPerCmMethod != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(DetectPixelsPerCmMethod);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeviceId);
      }
      if (CaptureW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CaptureW);
      }
      if (CaptureH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CaptureH);
      }
      if (CropX != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CropX);
      }
      if (CropY != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CropY);
      }
      if (CropW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CropW);
      }
      if (CropH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CropH);
      }
      if (DetectPixelsPerCm != false) {
        size += 1 + 1;
      }
      if (DetectPixelsPerCmMethod != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DetectPixelsPerCmMethod);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UltrasoundCaptureSetupRequestV1 other) {
      if (other == null) {
        return;
      }
      if (other.DeviceId != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.CaptureW != 0) {
        CaptureW = other.CaptureW;
      }
      if (other.CaptureH != 0) {
        CaptureH = other.CaptureH;
      }
      if (other.CropX != 0) {
        CropX = other.CropX;
      }
      if (other.CropY != 0) {
        CropY = other.CropY;
      }
      if (other.CropW != 0) {
        CropW = other.CropW;
      }
      if (other.CropH != 0) {
        CropH = other.CropH;
      }
      if (other.DetectPixelsPerCm != false) {
        DetectPixelsPerCm = other.DetectPixelsPerCm;
      }
      if (other.DetectPixelsPerCmMethod != 0) {
        DetectPixelsPerCmMethod = other.DetectPixelsPerCmMethod;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            DeviceId = input.ReadUInt32();
            break;
          }
          case 16: {
            CaptureW = input.ReadUInt32();
            break;
          }
          case 24: {
            CaptureH = input.ReadUInt32();
            break;
          }
          case 32: {
            CropX = input.ReadUInt32();
            break;
          }
          case 40: {
            CropY = input.ReadUInt32();
            break;
          }
          case 48: {
            CropW = input.ReadUInt32();
            break;
          }
          case 56: {
            CropH = input.ReadUInt32();
            break;
          }
          case 64: {
            DetectPixelsPerCm = input.ReadBool();
            break;
          }
          case 72: {
            DetectPixelsPerCmMethod = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UltrasoundCaptureSetupResponseV1 : pb::IMessage<UltrasoundCaptureSetupResponseV1> {
    private static readonly pb::MessageParser<UltrasoundCaptureSetupResponseV1> _parser = new pb::MessageParser<UltrasoundCaptureSetupResponseV1>(() => new UltrasoundCaptureSetupResponseV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UltrasoundCaptureSetupResponseV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NUHS.Sidecar.UltrasoundCaptureV1Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UltrasoundCaptureSetupResponseV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UltrasoundCaptureSetupResponseV1(UltrasoundCaptureSetupResponseV1 other) : this() {
      restartRequired_ = other.restartRequired_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UltrasoundCaptureSetupResponseV1 Clone() {
      return new UltrasoundCaptureSetupResponseV1(this);
    }

    /// <summary>Field number for the "restartRequired" field.</summary>
    public const int RestartRequiredFieldNumber = 1;
    private bool restartRequired_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool RestartRequired {
      get { return restartRequired_; }
      set {
        restartRequired_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UltrasoundCaptureSetupResponseV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UltrasoundCaptureSetupResponseV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RestartRequired != other.RestartRequired) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RestartRequired != false) hash ^= RestartRequired.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RestartRequired != false) {
        output.WriteRawTag(8);
        output.WriteBool(RestartRequired);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RestartRequired != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UltrasoundCaptureSetupResponseV1 other) {
      if (other == null) {
        return;
      }
      if (other.RestartRequired != false) {
        RestartRequired = other.RestartRequired;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RestartRequired = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UltrasoundCaptureRequestV1 : pb::IMessage<UltrasoundCaptureRequestV1> {
    private static readonly pb::MessageParser<UltrasoundCaptureRequestV1> _parser = new pb::MessageParser<UltrasoundCaptureRequestV1>(() => new UltrasoundCaptureRequestV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UltrasoundCaptureRequestV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NUHS.Sidecar.UltrasoundCaptureV1Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UltrasoundCaptureRequestV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UltrasoundCaptureRequestV1(UltrasoundCaptureRequestV1 other) : this() {
      fps_ = other.fps_;
      quality_ = other.quality_;
      restart_ = other.restart_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UltrasoundCaptureRequestV1 Clone() {
      return new UltrasoundCaptureRequestV1(this);
    }

    /// <summary>Field number for the "fps" field.</summary>
    public const int FpsFieldNumber = 1;
    private uint fps_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Fps {
      get { return fps_; }
      set {
        fps_ = value;
      }
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 2;
    private uint quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Quality {
      get { return quality_; }
      set {
        quality_ = value;
      }
    }

    /// <summary>Field number for the "restart" field.</summary>
    public const int RestartFieldNumber = 3;
    private bool restart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Restart {
      get { return restart_; }
      set {
        restart_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UltrasoundCaptureRequestV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UltrasoundCaptureRequestV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Fps != other.Fps) return false;
      if (Quality != other.Quality) return false;
      if (Restart != other.Restart) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Fps != 0) hash ^= Fps.GetHashCode();
      if (Quality != 0) hash ^= Quality.GetHashCode();
      if (Restart != false) hash ^= Restart.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Fps != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Fps);
      }
      if (Quality != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Quality);
      }
      if (Restart != false) {
        output.WriteRawTag(24);
        output.WriteBool(Restart);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Fps != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Fps);
      }
      if (Quality != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quality);
      }
      if (Restart != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UltrasoundCaptureRequestV1 other) {
      if (other == null) {
        return;
      }
      if (other.Fps != 0) {
        Fps = other.Fps;
      }
      if (other.Quality != 0) {
        Quality = other.Quality;
      }
      if (other.Restart != false) {
        Restart = other.Restart;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Fps = input.ReadUInt32();
            break;
          }
          case 16: {
            Quality = input.ReadUInt32();
            break;
          }
          case 24: {
            Restart = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UltrasoundCaptureFrameV1 : pb::IMessage<UltrasoundCaptureFrameV1> {
    private static readonly pb::MessageParser<UltrasoundCaptureFrameV1> _parser = new pb::MessageParser<UltrasoundCaptureFrameV1>(() => new UltrasoundCaptureFrameV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UltrasoundCaptureFrameV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NUHS.Sidecar.UltrasoundCaptureV1Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UltrasoundCaptureFrameV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UltrasoundCaptureFrameV1(UltrasoundCaptureFrameV1 other) : this() {
      data_ = other.data_;
      pixelsPerCm_ = other.pixelsPerCm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UltrasoundCaptureFrameV1 Clone() {
      return new UltrasoundCaptureFrameV1(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private pb::ByteString data_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "pixelsPerCm" field.</summary>
    public const int PixelsPerCmFieldNumber = 2;
    private float pixelsPerCm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PixelsPerCm {
      get { return pixelsPerCm_; }
      set {
        pixelsPerCm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UltrasoundCaptureFrameV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UltrasoundCaptureFrameV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Data != other.Data) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PixelsPerCm, other.PixelsPerCm)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (PixelsPerCm != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PixelsPerCm);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Data.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Data);
      }
      if (PixelsPerCm != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(PixelsPerCm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (PixelsPerCm != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UltrasoundCaptureFrameV1 other) {
      if (other == null) {
        return;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.PixelsPerCm != 0F) {
        PixelsPerCm = other.PixelsPerCm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Data = input.ReadBytes();
            break;
          }
          case 21: {
            PixelsPerCm = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
