// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: veinmapper_v1.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace NUHS.VeinServer {

  /// <summary>Holder for reflection information generated from veinmapper_v1.proto</summary>
  public static partial class VeinmapperV1Reflection {

    #region Descriptor
    /// <summary>File descriptor for veinmapper_v1.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VeinmapperV1Reflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChN2ZWlubWFwcGVyX3YxLnByb3RvGg12ZWN0b3JzLnByb3RvIjkKGFZlaW5N",
            "YXBwZXJTZXR1cFJlcXVlc3RWMRIQCghkZXZpY2VJRBgBIAEoCRILCgNsdXQY",
            "AiABKAwiLQoZVmVpbk1hcHBlclNldHVwUmVzcG9uc2VWMRIQCghkZXZpY2VJ",
            "RBgBIAEoCSKCAgoZVmVpbk1hcHBlclN0cmVhbVJlcXVlc3RWMRIQCghkZXZp",
            "Y2VJRBgBIAEoCRIPCgdpckltYWdlGAIgASgMEhIKCmRlcHRoSW1hZ2UYAyAB",
            "KAwSGgoSZGVwdGhUb1dvcmxkTWF0cml4GAQgASgJEhcKBmN1Ym9pZBgFIAEo",
            "CzIHLkN1Ym9pZBIWCg52ZWluTWFwcGVyVHlwZRgHIAEoCRIcChRpbWFnZUNv",
            "bXByZXNzaW9uVHlwZRgIIAEoCRIQCghzYXZlRGF0YRgJIAEoCBIeCgpjcm9w",
            "UmVnaW9uGAogASgLMgouSW1hZ2VTaXplEhEKCXRpbWVzdGFtcBgLIAEoAyJ5",
            "ChpWZWluTWFwcGVyU3RyZWFtUmVzcG9uc2VWMRIVCgZwb2ludHMYASADKAsy",
            "BS5WZWM0Eh4KCmNyb3BSZWdpb24YAiABKAsyCi5JbWFnZVNpemUSEQoJZGVs",
            "dGFUaW1lGAMgASgCEhEKCXRpbWVzdGFtcBgFIAEoAyJnCgZDdWJvaWQSFQoG",
            "b3JpZ2luGAEgASgLMgUuVmVjMxIWCgdjb3JuZXIxGAIgASgLMgUuVmVjMxIW",
            "Cgdjb3JuZXIyGAMgASgLMgUuVmVjMxIWCgdjb3JuZXIzGAQgASgLMgUuVmVj",
            "MyI3CglJbWFnZVNpemUSCQoBeBgBIAEoBRIJCgF5GAIgASgFEgkKAXcYAyAB",
            "KAUSCQoBaBgEIAEoBTKcAQoTVmVpbk1hcHBlclNlcnZpY2VWMRI+CgVTZXR1",
            "cBIZLlZlaW5NYXBwZXJTZXR1cFJlcXVlc3RWMRoaLlZlaW5NYXBwZXJTZXR1",
            "cFJlc3BvbnNlVjESRQoGU3RyZWFtEhouVmVpbk1hcHBlclN0cmVhbVJlcXVl",
            "c3RWMRobLlZlaW5NYXBwZXJTdHJlYW1SZXNwb25zZVYxKAEwAUISqgIPTlVI",
            "Uy5WZWluU2VydmVyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::NUHS.VeinServer.VectorsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::NUHS.VeinServer.VeinMapperSetupRequestV1), global::NUHS.VeinServer.VeinMapperSetupRequestV1.Parser, new[]{ "DeviceID", "Lut" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NUHS.VeinServer.VeinMapperSetupResponseV1), global::NUHS.VeinServer.VeinMapperSetupResponseV1.Parser, new[]{ "DeviceID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NUHS.VeinServer.VeinMapperStreamRequestV1), global::NUHS.VeinServer.VeinMapperStreamRequestV1.Parser, new[]{ "DeviceID", "IrImage", "DepthImage", "DepthToWorldMatrix", "Cuboid", "VeinMapperType", "ImageCompressionType", "SaveData", "CropRegion", "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NUHS.VeinServer.VeinMapperStreamResponseV1), global::NUHS.VeinServer.VeinMapperStreamResponseV1.Parser, new[]{ "Points", "CropRegion", "DeltaTime", "Timestamp" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NUHS.VeinServer.Cuboid), global::NUHS.VeinServer.Cuboid.Parser, new[]{ "Origin", "Corner1", "Corner2", "Corner3" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::NUHS.VeinServer.ImageSize), global::NUHS.VeinServer.ImageSize.Parser, new[]{ "X", "Y", "W", "H" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Setup request
  /// </summary>
  public sealed partial class VeinMapperSetupRequestV1 : pb::IMessage<VeinMapperSetupRequestV1> {
    private static readonly pb::MessageParser<VeinMapperSetupRequestV1> _parser = new pb::MessageParser<VeinMapperSetupRequestV1>(() => new VeinMapperSetupRequestV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VeinMapperSetupRequestV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NUHS.VeinServer.VeinmapperV1Reflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VeinMapperSetupRequestV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VeinMapperSetupRequestV1(VeinMapperSetupRequestV1 other) : this() {
      deviceID_ = other.deviceID_;
      lut_ = other.lut_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VeinMapperSetupRequestV1 Clone() {
      return new VeinMapperSetupRequestV1(this);
    }

    /// <summary>Field number for the "deviceID" field.</summary>
    public const int DeviceIDFieldNumber = 1;
    private string deviceID_ = "";
    /// <summary>
    /// Hololens device identifier string, e.g. "NUHS-HOLO1"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceID {
      get { return deviceID_; }
      set {
        deviceID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lut" field.</summary>
    public const int LutFieldNumber = 2;
    private pb::ByteString lut_ = pb::ByteString.Empty;
    /// <summary>
    /// LUT data of the Depth/IR sensor
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Lut {
      get { return lut_; }
      set {
        lut_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VeinMapperSetupRequestV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VeinMapperSetupRequestV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceID != other.DeviceID) return false;
      if (Lut != other.Lut) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceID.Length != 0) hash ^= DeviceID.GetHashCode();
      if (Lut.Length != 0) hash ^= Lut.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceID);
      }
      if (Lut.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(Lut);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceID);
      }
      if (Lut.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Lut);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VeinMapperSetupRequestV1 other) {
      if (other == null) {
        return;
      }
      if (other.DeviceID.Length != 0) {
        DeviceID = other.DeviceID;
      }
      if (other.Lut.Length != 0) {
        Lut = other.Lut;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeviceID = input.ReadString();
            break;
          }
          case 18: {
            Lut = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Setup response
  /// </summary>
  public sealed partial class VeinMapperSetupResponseV1 : pb::IMessage<VeinMapperSetupResponseV1> {
    private static readonly pb::MessageParser<VeinMapperSetupResponseV1> _parser = new pb::MessageParser<VeinMapperSetupResponseV1>(() => new VeinMapperSetupResponseV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VeinMapperSetupResponseV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NUHS.VeinServer.VeinmapperV1Reflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VeinMapperSetupResponseV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VeinMapperSetupResponseV1(VeinMapperSetupResponseV1 other) : this() {
      deviceID_ = other.deviceID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VeinMapperSetupResponseV1 Clone() {
      return new VeinMapperSetupResponseV1(this);
    }

    /// <summary>Field number for the "deviceID" field.</summary>
    public const int DeviceIDFieldNumber = 1;
    private string deviceID_ = "";
    /// <summary>
    /// Hololens device identifier string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceID {
      get { return deviceID_; }
      set {
        deviceID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VeinMapperSetupResponseV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VeinMapperSetupResponseV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceID != other.DeviceID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceID.Length != 0) hash ^= DeviceID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VeinMapperSetupResponseV1 other) {
      if (other == null) {
        return;
      }
      if (other.DeviceID.Length != 0) {
        DeviceID = other.DeviceID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeviceID = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Stream request
  /// </summary>
  public sealed partial class VeinMapperStreamRequestV1 : pb::IMessage<VeinMapperStreamRequestV1> {
    private static readonly pb::MessageParser<VeinMapperStreamRequestV1> _parser = new pb::MessageParser<VeinMapperStreamRequestV1>(() => new VeinMapperStreamRequestV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VeinMapperStreamRequestV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NUHS.VeinServer.VeinmapperV1Reflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VeinMapperStreamRequestV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VeinMapperStreamRequestV1(VeinMapperStreamRequestV1 other) : this() {
      deviceID_ = other.deviceID_;
      irImage_ = other.irImage_;
      depthImage_ = other.depthImage_;
      depthToWorldMatrix_ = other.depthToWorldMatrix_;
      cuboid_ = other.cuboid_ != null ? other.cuboid_.Clone() : null;
      veinMapperType_ = other.veinMapperType_;
      imageCompressionType_ = other.imageCompressionType_;
      saveData_ = other.saveData_;
      cropRegion_ = other.cropRegion_ != null ? other.cropRegion_.Clone() : null;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VeinMapperStreamRequestV1 Clone() {
      return new VeinMapperStreamRequestV1(this);
    }

    /// <summary>Field number for the "deviceID" field.</summary>
    public const int DeviceIDFieldNumber = 1;
    private string deviceID_ = "";
    /// <summary>
    /// Hololens device identifier string
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeviceID {
      get { return deviceID_; }
      set {
        deviceID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "irImage" field.</summary>
    public const int IrImageFieldNumber = 2;
    private pb::ByteString irImage_ = pb::ByteString.Empty;
    /// <summary>
    /// IR image data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString IrImage {
      get { return irImage_; }
      set {
        irImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "depthImage" field.</summary>
    public const int DepthImageFieldNumber = 3;
    private pb::ByteString depthImage_ = pb::ByteString.Empty;
    /// <summary>
    /// Depth image data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString DepthImage {
      get { return depthImage_; }
      set {
        depthImage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "depthToWorldMatrix" field.</summary>
    public const int DepthToWorldMatrixFieldNumber = 4;
    private string depthToWorldMatrix_ = "";
    /// <summary>
    /// Depth to world matrix
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DepthToWorldMatrix {
      get { return depthToWorldMatrix_; }
      set {
        depthToWorldMatrix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cuboid" field.</summary>
    public const int CuboidFieldNumber = 5;
    private global::NUHS.VeinServer.Cuboid cuboid_;
    /// <summary>
    /// 4 corners of a cuboid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NUHS.VeinServer.Cuboid Cuboid {
      get { return cuboid_; }
      set {
        cuboid_ = value;
      }
    }

    /// <summary>Field number for the "veinMapperType" field.</summary>
    public const int VeinMapperTypeFieldNumber = 7;
    private string veinMapperType_ = "";
    /// <summary>
    /// Algorithm to use for vein mapping
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VeinMapperType {
      get { return veinMapperType_; }
      set {
        veinMapperType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "imageCompressionType" field.</summary>
    public const int ImageCompressionTypeFieldNumber = 8;
    private string imageCompressionType_ = "";
    /// <summary>
    /// Compression for irImage and depthImage, e.g. "none", "gzip"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ImageCompressionType {
      get { return imageCompressionType_; }
      set {
        imageCompressionType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "saveData" field.</summary>
    public const int SaveDataFieldNumber = 9;
    private bool saveData_;
    /// <summary>
    /// Flag to indicate if the server should save the data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SaveData {
      get { return saveData_; }
      set {
        saveData_ = value;
      }
    }

    /// <summary>Field number for the "cropRegion" field.</summary>
    public const int CropRegionFieldNumber = 10;
    private global::NUHS.VeinServer.ImageSize cropRegion_;
    /// <summary>
    /// Area that was cropped
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NUHS.VeinServer.ImageSize CropRegion {
      get { return cropRegion_; }
      set {
        cropRegion_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 11;
    private long timestamp_;
    /// <summary>
    /// Timestamp from the client (for debugging purposes)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VeinMapperStreamRequestV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VeinMapperStreamRequestV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DeviceID != other.DeviceID) return false;
      if (IrImage != other.IrImage) return false;
      if (DepthImage != other.DepthImage) return false;
      if (DepthToWorldMatrix != other.DepthToWorldMatrix) return false;
      if (!object.Equals(Cuboid, other.Cuboid)) return false;
      if (VeinMapperType != other.VeinMapperType) return false;
      if (ImageCompressionType != other.ImageCompressionType) return false;
      if (SaveData != other.SaveData) return false;
      if (!object.Equals(CropRegion, other.CropRegion)) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DeviceID.Length != 0) hash ^= DeviceID.GetHashCode();
      if (IrImage.Length != 0) hash ^= IrImage.GetHashCode();
      if (DepthImage.Length != 0) hash ^= DepthImage.GetHashCode();
      if (DepthToWorldMatrix.Length != 0) hash ^= DepthToWorldMatrix.GetHashCode();
      if (cuboid_ != null) hash ^= Cuboid.GetHashCode();
      if (VeinMapperType.Length != 0) hash ^= VeinMapperType.GetHashCode();
      if (ImageCompressionType.Length != 0) hash ^= ImageCompressionType.GetHashCode();
      if (SaveData != false) hash ^= SaveData.GetHashCode();
      if (cropRegion_ != null) hash ^= CropRegion.GetHashCode();
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DeviceID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DeviceID);
      }
      if (IrImage.Length != 0) {
        output.WriteRawTag(18);
        output.WriteBytes(IrImage);
      }
      if (DepthImage.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(DepthImage);
      }
      if (DepthToWorldMatrix.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(DepthToWorldMatrix);
      }
      if (cuboid_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Cuboid);
      }
      if (VeinMapperType.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(VeinMapperType);
      }
      if (ImageCompressionType.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(ImageCompressionType);
      }
      if (SaveData != false) {
        output.WriteRawTag(72);
        output.WriteBool(SaveData);
      }
      if (cropRegion_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(CropRegion);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DeviceID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceID);
      }
      if (IrImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(IrImage);
      }
      if (DepthImage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(DepthImage);
      }
      if (DepthToWorldMatrix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DepthToWorldMatrix);
      }
      if (cuboid_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Cuboid);
      }
      if (VeinMapperType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VeinMapperType);
      }
      if (ImageCompressionType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ImageCompressionType);
      }
      if (SaveData != false) {
        size += 1 + 1;
      }
      if (cropRegion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CropRegion);
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VeinMapperStreamRequestV1 other) {
      if (other == null) {
        return;
      }
      if (other.DeviceID.Length != 0) {
        DeviceID = other.DeviceID;
      }
      if (other.IrImage.Length != 0) {
        IrImage = other.IrImage;
      }
      if (other.DepthImage.Length != 0) {
        DepthImage = other.DepthImage;
      }
      if (other.DepthToWorldMatrix.Length != 0) {
        DepthToWorldMatrix = other.DepthToWorldMatrix;
      }
      if (other.cuboid_ != null) {
        if (cuboid_ == null) {
          Cuboid = new global::NUHS.VeinServer.Cuboid();
        }
        Cuboid.MergeFrom(other.Cuboid);
      }
      if (other.VeinMapperType.Length != 0) {
        VeinMapperType = other.VeinMapperType;
      }
      if (other.ImageCompressionType.Length != 0) {
        ImageCompressionType = other.ImageCompressionType;
      }
      if (other.SaveData != false) {
        SaveData = other.SaveData;
      }
      if (other.cropRegion_ != null) {
        if (cropRegion_ == null) {
          CropRegion = new global::NUHS.VeinServer.ImageSize();
        }
        CropRegion.MergeFrom(other.CropRegion);
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DeviceID = input.ReadString();
            break;
          }
          case 18: {
            IrImage = input.ReadBytes();
            break;
          }
          case 26: {
            DepthImage = input.ReadBytes();
            break;
          }
          case 34: {
            DepthToWorldMatrix = input.ReadString();
            break;
          }
          case 42: {
            if (cuboid_ == null) {
              Cuboid = new global::NUHS.VeinServer.Cuboid();
            }
            input.ReadMessage(Cuboid);
            break;
          }
          case 58: {
            VeinMapperType = input.ReadString();
            break;
          }
          case 66: {
            ImageCompressionType = input.ReadString();
            break;
          }
          case 72: {
            SaveData = input.ReadBool();
            break;
          }
          case 82: {
            if (cropRegion_ == null) {
              CropRegion = new global::NUHS.VeinServer.ImageSize();
            }
            input.ReadMessage(CropRegion);
            break;
          }
          case 88: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Stream response
  /// </summary>
  public sealed partial class VeinMapperStreamResponseV1 : pb::IMessage<VeinMapperStreamResponseV1> {
    private static readonly pb::MessageParser<VeinMapperStreamResponseV1> _parser = new pb::MessageParser<VeinMapperStreamResponseV1>(() => new VeinMapperStreamResponseV1());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VeinMapperStreamResponseV1> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NUHS.VeinServer.VeinmapperV1Reflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VeinMapperStreamResponseV1() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VeinMapperStreamResponseV1(VeinMapperStreamResponseV1 other) : this() {
      points_ = other.points_.Clone();
      cropRegion_ = other.cropRegion_ != null ? other.cropRegion_.Clone() : null;
      deltaTime_ = other.deltaTime_;
      timestamp_ = other.timestamp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VeinMapperStreamResponseV1 Clone() {
      return new VeinMapperStreamResponseV1(this);
    }

    /// <summary>Field number for the "points" field.</summary>
    public const int PointsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::NUHS.VeinServer.Vec4> _repeated_points_codec
        = pb::FieldCodec.ForMessage(10, global::NUHS.VeinServer.Vec4.Parser);
    private readonly pbc::RepeatedField<global::NUHS.VeinServer.Vec4> points_ = new pbc::RepeatedField<global::NUHS.VeinServer.Vec4>();
    /// <summary>
    /// Array of points for point cloud
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::NUHS.VeinServer.Vec4> Points {
      get { return points_; }
    }

    /// <summary>Field number for the "cropRegion" field.</summary>
    public const int CropRegionFieldNumber = 2;
    private global::NUHS.VeinServer.ImageSize cropRegion_;
    /// <summary>
    /// Area that should be cropped in next frame
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NUHS.VeinServer.ImageSize CropRegion {
      get { return cropRegion_; }
      set {
        cropRegion_ = value;
      }
    }

    /// <summary>Field number for the "deltaTime" field.</summary>
    public const int DeltaTimeFieldNumber = 3;
    private float deltaTime_;
    /// <summary>
    /// Time taken for server process in seconds 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DeltaTime {
      get { return deltaTime_; }
      set {
        deltaTime_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 5;
    private long timestamp_;
    /// <summary>
    /// Original timestamp sent in VeinMapperStreamRequestV1.timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VeinMapperStreamResponseV1);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VeinMapperStreamResponseV1 other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!points_.Equals(other.points_)) return false;
      if (!object.Equals(CropRegion, other.CropRegion)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DeltaTime, other.DeltaTime)) return false;
      if (Timestamp != other.Timestamp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= points_.GetHashCode();
      if (cropRegion_ != null) hash ^= CropRegion.GetHashCode();
      if (DeltaTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DeltaTime);
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      points_.WriteTo(output, _repeated_points_codec);
      if (cropRegion_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(CropRegion);
      }
      if (DeltaTime != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DeltaTime);
      }
      if (Timestamp != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(Timestamp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += points_.CalculateSize(_repeated_points_codec);
      if (cropRegion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CropRegion);
      }
      if (DeltaTime != 0F) {
        size += 1 + 4;
      }
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VeinMapperStreamResponseV1 other) {
      if (other == null) {
        return;
      }
      points_.Add(other.points_);
      if (other.cropRegion_ != null) {
        if (cropRegion_ == null) {
          CropRegion = new global::NUHS.VeinServer.ImageSize();
        }
        CropRegion.MergeFrom(other.CropRegion);
      }
      if (other.DeltaTime != 0F) {
        DeltaTime = other.DeltaTime;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            points_.AddEntriesFrom(input, _repeated_points_codec);
            break;
          }
          case 18: {
            if (cropRegion_ == null) {
              CropRegion = new global::NUHS.VeinServer.ImageSize();
            }
            input.ReadMessage(CropRegion);
            break;
          }
          case 29: {
            DeltaTime = input.ReadFloat();
            break;
          }
          case 40: {
            Timestamp = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Defines a cuboid by providing 4 corners
  /// </summary>
  public sealed partial class Cuboid : pb::IMessage<Cuboid> {
    private static readonly pb::MessageParser<Cuboid> _parser = new pb::MessageParser<Cuboid>(() => new Cuboid());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Cuboid> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NUHS.VeinServer.VeinmapperV1Reflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cuboid() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cuboid(Cuboid other) : this() {
      origin_ = other.origin_ != null ? other.origin_.Clone() : null;
      corner1_ = other.corner1_ != null ? other.corner1_.Clone() : null;
      corner2_ = other.corner2_ != null ? other.corner2_.Clone() : null;
      corner3_ = other.corner3_ != null ? other.corner3_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Cuboid Clone() {
      return new Cuboid(this);
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 1;
    private global::NUHS.VeinServer.Vec3 origin_;
    /// <summary>
    /// Origin of cuboid
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NUHS.VeinServer.Vec3 Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "corner1" field.</summary>
    public const int Corner1FieldNumber = 2;
    private global::NUHS.VeinServer.Vec3 corner1_;
    /// <summary>
    /// First corner (O->C1 = width)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NUHS.VeinServer.Vec3 Corner1 {
      get { return corner1_; }
      set {
        corner1_ = value;
      }
    }

    /// <summary>Field number for the "corner2" field.</summary>
    public const int Corner2FieldNumber = 3;
    private global::NUHS.VeinServer.Vec3 corner2_;
    /// <summary>
    /// Second corner (O->C2 = height)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NUHS.VeinServer.Vec3 Corner2 {
      get { return corner2_; }
      set {
        corner2_ = value;
      }
    }

    /// <summary>Field number for the "corner3" field.</summary>
    public const int Corner3FieldNumber = 4;
    private global::NUHS.VeinServer.Vec3 corner3_;
    /// <summary>
    /// Third corner (O->C3 = depth)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::NUHS.VeinServer.Vec3 Corner3 {
      get { return corner3_; }
      set {
        corner3_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Cuboid);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Cuboid other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Origin, other.Origin)) return false;
      if (!object.Equals(Corner1, other.Corner1)) return false;
      if (!object.Equals(Corner2, other.Corner2)) return false;
      if (!object.Equals(Corner3, other.Corner3)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (origin_ != null) hash ^= Origin.GetHashCode();
      if (corner1_ != null) hash ^= Corner1.GetHashCode();
      if (corner2_ != null) hash ^= Corner2.GetHashCode();
      if (corner3_ != null) hash ^= Corner3.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (origin_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Origin);
      }
      if (corner1_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Corner1);
      }
      if (corner2_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Corner2);
      }
      if (corner3_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Corner3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (origin_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Origin);
      }
      if (corner1_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Corner1);
      }
      if (corner2_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Corner2);
      }
      if (corner3_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Corner3);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Cuboid other) {
      if (other == null) {
        return;
      }
      if (other.origin_ != null) {
        if (origin_ == null) {
          Origin = new global::NUHS.VeinServer.Vec3();
        }
        Origin.MergeFrom(other.Origin);
      }
      if (other.corner1_ != null) {
        if (corner1_ == null) {
          Corner1 = new global::NUHS.VeinServer.Vec3();
        }
        Corner1.MergeFrom(other.Corner1);
      }
      if (other.corner2_ != null) {
        if (corner2_ == null) {
          Corner2 = new global::NUHS.VeinServer.Vec3();
        }
        Corner2.MergeFrom(other.Corner2);
      }
      if (other.corner3_ != null) {
        if (corner3_ == null) {
          Corner3 = new global::NUHS.VeinServer.Vec3();
        }
        Corner3.MergeFrom(other.Corner3);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (origin_ == null) {
              Origin = new global::NUHS.VeinServer.Vec3();
            }
            input.ReadMessage(Origin);
            break;
          }
          case 18: {
            if (corner1_ == null) {
              Corner1 = new global::NUHS.VeinServer.Vec3();
            }
            input.ReadMessage(Corner1);
            break;
          }
          case 26: {
            if (corner2_ == null) {
              Corner2 = new global::NUHS.VeinServer.Vec3();
            }
            input.ReadMessage(Corner2);
            break;
          }
          case 34: {
            if (corner3_ == null) {
              Corner3 = new global::NUHS.VeinServer.Vec3();
            }
            input.ReadMessage(Corner3);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Defines an image size by providing top-left and size
  /// </summary>
  public sealed partial class ImageSize : pb::IMessage<ImageSize> {
    private static readonly pb::MessageParser<ImageSize> _parser = new pb::MessageParser<ImageSize>(() => new ImageSize());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageSize> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::NUHS.VeinServer.VeinmapperV1Reflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSize() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSize(ImageSize other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      w_ = other.w_;
      h_ = other.h_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageSize Clone() {
      return new ImageSize(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private int x_;
    /// <summary>
    /// Top left X
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private int y_;
    /// <summary>
    /// Top left Y
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "w" field.</summary>
    public const int WFieldNumber = 3;
    private int w_;
    /// <summary>
    /// Width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int W {
      get { return w_; }
      set {
        w_ = value;
      }
    }

    /// <summary>Field number for the "h" field.</summary>
    public const int HFieldNumber = 4;
    private int h_;
    /// <summary>
    /// Height
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int H {
      get { return h_; }
      set {
        h_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageSize);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageSize other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (X != other.X) return false;
      if (Y != other.Y) return false;
      if (W != other.W) return false;
      if (H != other.H) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0) hash ^= X.GetHashCode();
      if (Y != 0) hash ^= Y.GetHashCode();
      if (W != 0) hash ^= W.GetHashCode();
      if (H != 0) hash ^= H.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(X);
      }
      if (Y != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Y);
      }
      if (W != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(W);
      }
      if (H != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(H);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(X);
      }
      if (Y != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Y);
      }
      if (W != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(W);
      }
      if (H != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(H);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageSize other) {
      if (other == null) {
        return;
      }
      if (other.X != 0) {
        X = other.X;
      }
      if (other.Y != 0) {
        Y = other.Y;
      }
      if (other.W != 0) {
        W = other.W;
      }
      if (other.H != 0) {
        H = other.H;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            X = input.ReadInt32();
            break;
          }
          case 16: {
            Y = input.ReadInt32();
            break;
          }
          case 24: {
            W = input.ReadInt32();
            break;
          }
          case 32: {
            H = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
