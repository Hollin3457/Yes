#pragma kernel LookAtCamera

StructuredBuffer<float4> _Positions;
RWStructuredBuffer<float4x4> _Matrices;
float _PointSize;
uint _PositionCount;
float4 _CameraPosition;

[numthreads(64, 1, 1)]
void LookAtCamera(uint id: SV_DispatchThreadID)
{
	if (id >= _PositionCount)
	{
		return;
	}

    float3 meshPos = _Positions[id].xyz;
    float3 meshToCam = meshPos - _CameraPosition.xyz;

    float3 forward = normalize(meshToCam);
    float3 up = float3(0, 1, 0);
    float3 right = cross(up, forward);
    up = cross(forward, right);
    
    float4x4 rotationMatrix = float4x4(
        float4(right.x, up.x, forward.x, 0),
        float4(right.y, up.y, forward.y, 0),
        float4(right.z, up.z, forward.z, 0),
        float4(0, 0, 0, 1)
    );

    float4x4 scaleMatrix = float4x4(
        float4(_PointSize, 0, 0, 0),
        float4(0, _PointSize, 0, 0),
        float4(0, 0, _PointSize, 0),
        float4(0, 0, 0, 1)
    );

    float4x4 translationMatrix = float4x4(
        float4(1, 0, 0, meshPos.x),
        float4(0, 1, 0, meshPos.y),
        float4(0, 0, 1, meshPos.z),
        float4(0, 0, 0, 1)
    );

    _Matrices[id] = mul(translationMatrix, mul(rotationMatrix, scaleMatrix));
}
